# Multi-stage build para optimizar el tama침o de la imagen

# Stage 1: Build
FROM node:20-alpine AS builder

WORKDIR /app

# Copiar archivos de dependencias
COPY package.json yarn.lock ./
COPY tsconfig.json ./
COPY prisma/ ./prisma/

# Instalar dependencias
RUN yarn install --frozen-lockfile

# Copiar c칩digo fuente
COPY src/ ./src/

# Generar Prisma client
RUN yarn prisma:generate

# Compilar TypeScript
RUN yarn build

# Stage 2: Production
FROM node:20-alpine AS production

# Install dumb-init for signal handling
RUN apk add --no-cache dumb-init openssl

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

WORKDIR /app

# Copiar archivos de dependencias
COPY package.json yarn.lock ./
COPY prisma/ ./prisma/

# Instalar solo dependencias de producci칩n
RUN yarn install --frozen-lockfile --production=true && yarn cache clean

# Copiar archivos compilados del builder
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

# Cambiar a usuario no-root
USER nextjs

# Exponer puerto
EXPOSE 3000

# Variables de entorno por defecto
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Usar dumb-init como entrypoint para manejo correcto de se침ales
ENTRYPOINT ["dumb-init", "--"]

# Comando por defecto
CMD ["node", "dist/main.js"]